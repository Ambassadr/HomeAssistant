# @Author: Will Scott <willscottuk>
# @Date:   12/06/2017 22:03
# @Project: Ambassadr Home Automation
# @Last modified by:   willscott
# @Last modified time: 18/03/2018 17:48

# This package deals with alarms

homeassistant:

  customize:
    sensor.walarm_time:
      icon: mdi:alarm
    sensor.dalarm_time:
      icon: mdi:alarm

# Inputs for Will & Dan's alarms
# TODO: Switch to using https://home-assistant.io/components/input_datetime/

input_number:
  walarmhour:
    name: Hour
    icon: mdi:timer
    # Defaults to 06:10
    initial: 6
    min: 0
    max: 23
    step: 1
  walarmminutes:
    name: Minutes
    icon: mdi:timer
    # Defaults to 06:10
    initial: 10
    min: 0
    max: 55
    step: 5
  dalarmhour:
    name: Hour
    icon: mdi:timer
    # Defaults to 06:35
    initial: 6
    min: 0
    max: 23
    step: 1
  dalarmminutes:
    name: Minutes
    icon: mdi:timer
    # Defaults to 06:35
    initial: 35
    min: 0
    max: 55
    step: 5

# Switching to use input_datetime

input_datetime:
  walarm_time:
      name: Time
      has_date: false
      has_time: true
  dalarm_time:
      name: Time
      has_date: false
      has_time: true

# Now workday based! 2018-03-18

input_boolean:
  walarmworkday:
    name: Workdays Only
    initial: on
    icon: mdi:calendar
  dalarmworkday:
    name: Workdays Only
    initial: on
    icon: mdi:calendar
  alarm:
    name: Alarm Active


# Integrated time sensors (combines the hour and minute input sensors)
sensor:
  - platform: template
    sensors:
      walarm_time:
        friendly_name: 'Time'
        value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.walarmhour") | int, states("input_number.walarmminutes") | int) }}'
      dalarm_time:
        friendly_name: 'Time'
        value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.dalarmhour") | int, states("input_number.dalarmminutes") | int) }}'

# Alarm logic - checks if set time is now and if its an appropriate day

automation:
  - alias: 'Wake Will Up'
    trigger:
      # Temporarily dual triggering for testing! TODO: Remove the old one!
      - platform: template
        value_template: '{{ states.sensor.time.state == states.sensor.walarm_time.state }}'
      - platform: template
        value_template: "{{ states('sensor.time') == (states.input_datetime.walarm_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      condition: or
      # Either the weekday only switch is on and it's a weekday
      conditions:
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.walarmworkday
              state: 'on'
            - condition: state
              entity_id: sensor.will_workday_today
              state: 'True'
            - condition: state
              entity_id: input_boolean.will_home
              state: 'on'
        # Or the weekday only switch is off
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.walarmworkday
              state: 'off'
            - condition: state
              entity_id: input_boolean.will_home
              state: 'on'
    action:
        - service: scene.turn_on
          entity_id: scene.will_sunrise_1
        - delay: 0:02
        - service: scene.turn_on
          entity_id: scene.will_sunrise_2
        - delay: 0:02
        - service: scene.turn_on
          entity_id: scene.will_sunrise_3
        - delay: 0:01
        - service: notify.will
          data_template:
            title: "\U0001F305 Morning Will!"
            message: >
              {%- if states("sensor.dark_sky_daily_max_precip_intensity") | float > 0.05 -%}
              Take an umbrella - {{ states("sensor.dark_sky_hourly_summary") | lower}}
              {%- else -%}
              Today's forecast is {{ states("sensor.dark_sky_hourly_summary") | lower}}
              {%- endif -%}
              {%- if states("sensor.dark_sky_daily_high_temperature")  | float > states("sensor.heating_temperature") | float -%}
              It'll be warm out today, with a high of {{ states("sensor.dark_sky_daily_high_temperature")  }}ºC.
              {%- elif states("sensor.dark_sky_daily_high_temperature")  | float < states("sensor.heating_set_temp") | float -%}
              Chilly day ahead - max of {{ states("sensor.dark_sky_daily_high_temperature")  }}ºC.
              {%- endif -%}
              {%- if (states("sensor.heating_temperature")  | float < states("sensor.heating_set_temp") | float) and (states("sensor.heating_heating")  | float > 0 ) -%}
              It's only {{states("sensor.heating_temperature")}} inside but the heating is on.
              {%- endif -%}
              {%- if states("sensor.tram_status") != "Good Service" -%}
              London Trams currently has {{ states("sensor.tram_status") | lower}}.
              {%- endif -%}
        - service: input_boolean.turn_on
          entity_id: input_boolean.alarm

  - alias: 'Wake Dan Up'
    trigger:
      # Temporarily dual triggering for testing! TODO: Remove the old one!
      - platform: template
        value_template: '{{ states.sensor.time.state == states.sensor.dalarm_time.state }}'
      - platform: template
        value_template: "{{ states('sensor.time') == (states.input_datetime.dalarm_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      condition: or
      conditions:
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.dalarmworkday
              state: 'on'
            - condition: state
              entity_id: sensor.dan_workday_today
              state: 'True'
            - condition: state
              entity_id: input_boolean.dan_home
              state: 'on'
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.dalarmworkday
              state: 'off'
            - condition: state
              entity_id: input_boolean.dan_home
              state: 'on'
    action:
        - service: scene.turn_on
          entity_id: scene.dan_sunrise_1
        - delay: 0:02
        - service: scene.turn_on
          entity_id: scene.dan_sunrise_2
        - delay: 0:02
        - service: scene.turn_on
          entity_id: scene.dan_sunrise_3
        - delay: 0:01
        - service: notify.dan
          data_template:
            title: "\U0001F305 Morning Dan!"
            message: >
              {%- if states("sensor.dark_sky_daily_max_precip_intensity") | float > 0.05 -%}
              Take an umbrella - {{ states("sensor.dark_sky_hourly_summary") | lower}}
              {%- else -%}
              Today's forecast is {{ states("sensor.dark_sky_hourly_summary") | lower}}
              {%- endif -%}
              {%- if states("sensor.dark_sky_daily_high_temperature")  | float > states("sensor.heating_temperature") | float -%}
              It'll be warm out today, with a high of {{ states("sensor.dark_sky_daily_high_temperature")  }}ºC.
              {%- elif states("sensor.dark_sky_daily_high_temperature")  | float < states("sensor.heating_set_temp") | float -%}
              Chilly day ahead - max of {{ states("sensor.dark_sky_daily_high_temperature")  }}ºC.
              {%- endif -%}
              {%- if (states("sensor.heating_temperature")  | float < states("sensor.heating_set_temp") | float) and (states("sensor.heating_heating")  | float > 0 ) -%}
              It's only {{states("sensor.heating_temperature")}} inside but the heating is on.
              {%- endif -%}
              {%- if states("sensor.tram_status") != "Good Service" -%}
              London Trams currently has {{ states("sensor.tram_status") | lower}}.
              {%- endif -%}
        - service: input_boolean.turn_on
          entity_id: input_boolean.alarm

# Alarm triggers (radio, lights, tv, coffee etc.)
  - alias: 'Alarm On'
    trigger:
      platform: state
      entity_id: input_boolean.alarm
      to: 'on'
    action:
      - service: media_player.select_source
        entity_id: media_player.bedroom_one
        data:
          source: "BBC Radio 4"
    # Remove living room automations (and guest mode option)

  - alias: 'Alarm Reset'
    trigger:
      platform: state
      entity_id: input_boolean.alarm
      to: 'on'
      for:
        hours: 2
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.alarm


# Incremental (currently very white!) wake up scenes.

# Part of the push to version 2 will be to change the colours to make it much redder to start with.

scene:
    - name: Will Sunrise 1
      entities:
       light.will_side:
          state: on
          transition: 60
          brightness: 10
          color_temp: 200
    - name: Dan Sunrise 1
      entities:
       light.daniel_side:
          state: on
          transition: 60
          brightness: 10
          color_temp: 200
    - name: Will Sunrise 2
      entities:
       light.will_side:
          state: on
          transition: 60
          brightness: 60
          color_temp: 200
    - name: Dan Sunrise 2
      entities:
       light.daniel_side:
          state: on
          transition: 60
          brightness: 60
          color_temp: 200
    - name: Will Sunrise 3
      entities:
       light.will_side:
          state: on
          transition: 60
          brightness: 120
          color_temp: 200
    - name: Dan Sunrise 3
      entities:
       light.daniel_side:
          state: on
          transition: 60
          brightness: 120
          color_temp: 200

# The display groups for the alarm panels
group:
  walarmclock:
    name: Will Alarm
    control: hidden
    entities:
      - input_datetime.walarm_time
      - sensor.walarm_time
      - input_number.walarmhour
      - input_number.walarmminutes
      # Turns the entire alarm off
      - automation.wake_will_up
      - input_boolean.walarmworkday
      - sensor.will_workday_today
      - sensor.will_workday_tomorrow

  dalarmclock:
    name: Dan Alarm
    control: hidden
    entities:
      - input_datetime.dalarm_time
      - sensor.dalarm_time
      - input_number.dalarmhour
      - input_number.dalarmminutes
      # Turns the entire alarm off
      - automation.wake_dan_up
      - input_boolean.dalarmworkday
      - sensor.dan_workday_today
      - sensor.dan_workday_tomorrow
